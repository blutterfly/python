{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Documentation","text":"<p>Python knowledge base, code examples,  best practices, implementation.</p>"},{"location":"examples/","title":"Python Examples","text":"<p>Blurb</p>"},{"location":"examples/data_structures/","title":"Code Examples","text":""},{"location":"examples/data_structures/#data-structures","title":"Data Structures","text":"<p>Here\u2019s a tutorial introducing Python data structures like lists, dictionaries, and dataframes in a simple way suitable for high school students.</p>"},{"location":"examples/data_structures/#data-structures-in-python","title":"Data Structures in Python","text":""},{"location":"examples/data_structures/#1-lists","title":"1. Lists","text":"<p>Lists are used to store multiple items in a single variable.</p> <p>Creating a List</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits)\n</code></pre> <p>Accessing Items</p> <pre><code>print(fruits[0])  # First item\nprint(fruits[-1])  # Last item\n</code></pre> <p>Modifying Lists</p> <pre><code>fruits.append(\"orange\")  # Add an item\nfruits[1] = \"blueberry\"  # Change an item\nprint(fruits)\n</code></pre> <p>Iterating Through a List</p> <pre><code>for fruit in fruits:\n    print(fruit)\n</code></pre> <p>Common List Methods</p> <ul> <li><code>append(item)</code>: Add an item</li> <li><code>remove(item)</code>: Remove an item</li> <li><code>len(list)</code>: Get the number of items</li> <li><code>sort()</code>: Sort the list</li> </ul> <p>Exercise:</p> <ol> <li>Create a list of your favorite hobbies.</li> <li>Add a new hobby to the list.</li> <li>Print each hobby using a loop.</li> </ol>"},{"location":"examples/data_structures/#2-dictionaries","title":"2. Dictionaries","text":"<p>Dictionaries store data in key-value pairs.</p> <p>Creating a Dictionary</p> <pre><code>student = {\"name\": \"Alex\", \"age\": 16, \"grade\": \"A\"}\nprint(student)\n</code></pre> <p>Accessing Items</p> <pre><code>print(student[\"name\"])  # Access value by key\n</code></pre> <p>Adding/Updating Keys</p> <pre><code>student[\"school\"] = \"High School\"  # Add a new key\nstudent[\"grade\"] = \"A+\"  # Update value\nprint(student)\n</code></pre> <p>Iterating Through a Dictionary</p> <pre><code>for key, value in student.items():\n    print(key, \":\", value)\n</code></pre> <p>Common Dictionary Methods</p> <ul> <li><code>keys()</code>: Get all keys</li> <li><code>values()</code>: Get all values</li> <li><code>items()</code>: Get all key-value pairs</li> </ul> <p>Exercise:</p> <ol> <li>Create a dictionary with details about your favorite book (title, author, year).</li> <li>Add a new key for the genre.</li> <li>Print all the keys and values.</li> </ol>"},{"location":"examples/data_structures/#3-dataframes-using-pandas","title":"3. DataFrames (Using pandas)","text":"<p>What is a DataFrame? A DataFrame is a 2-dimensional table-like data structure in the pandas library. Think of it as a spreadsheet.</p> <p>Setting Up pandas Make sure you have pandas installed:</p> <pre><code>pip install pandas\n</code></pre> <p>Creating a DataFrame</p> <pre><code>import pandas as pd\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [16, 17, 16],\n    \"Grade\": [\"A\", \"B\", \"A\"]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre> <p>Accessing Columns</p> <pre><code>print(df[\"Name\"])  # Access a single column\nprint(df[[\"Name\", \"Age\"]])  # Access multiple columns\n</code></pre> <p>Filtering Rows</p> <pre><code>print(df[df[\"Age\"] &gt; 16])  # Students older than 16\n</code></pre> <p>Adding a New Column</p> <pre><code>df[\"Passed\"] = [True, False, True]\nprint(df)\n</code></pre> <p>Iterating Through Rows</p> <pre><code>for index, row in df.iterrows():\n    print(row[\"Name\"], \"is\", row[\"Age\"], \"years old.\")\n</code></pre> <p>Exercise:</p> <ol> <li>Create a DataFrame with data about your favorite movies (columns: Title, Year, Genre).</li> <li>Add a new column for Rating.</li> <li>Filter the movies to show only those released after 2010.</li> </ol>"},{"location":"examples/data_structures/#4-comparing-lists-dictionaries-and-dataframes","title":"4. Comparing Lists, Dictionaries, and DataFrames","text":"Feature List Dictionary DataFrame Data Organization Ordered, items by index Key-value pairs Rows and columns Access Method By index By key By row/column Ideal Use Case Simple collections Mapping relationships Tabular data"},{"location":"examples/data_structures/#5-final-project-idea-student-report-system","title":"5. Final Project Idea: Student Report System","text":"<p>Build a system that:</p> <ol> <li>Stores student data in a DataFrame.</li> <li>Allows adding a new student (Name, Age, Grade).</li> <li>Filters students by a minimum grade.</li> <li>Prints all student data.</li> </ol> <p>Example Code for the System:</p> <pre><code>import pandas as pd\n\n# Initial data\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [16, 17, 16],\n    \"Grade\": [\"A\", \"B\", \"A\"]\n}\ndf = pd.DataFrame(data)\n\n# Add a new student\nnew_student = {\"Name\": \"Daisy\", \"Age\": 17, \"Grade\": \"A+\"}\ndf = df.append(new_student, ignore_index=True)\n\n# Filter by grade\nprint(\"Students with grade A or higher:\")\nprint(df[df[\"Grade\"] &gt;= \"A\"])\n</code></pre>"},{"location":"examples/data_structures/#file-io","title":"File IO","text":"<p>Here\u2019s a tutorial on writing, saving, and reading files in Python, along with template functions for working with plain text, CSV, and JSON files.</p>"},{"location":"examples/data_structures/#1-plain-text-file","title":"1. Plain Text File","text":"<p>Plain text files are the simplest type of file. You can write strings to them or read their content as text.</p>"},{"location":"examples/data_structures/#template-function-for-plain-text-files","title":"Template Function for Plain Text Files","text":"<p>Writing to a Plain Text File</p> <pre><code>def write_to_text_file(file_path, text):\n    with open(file_path, 'w') as file:  # Open file in write mode\n        file.write(text)  # Write text to the file\n</code></pre> <p>Reading from a Plain Text File</p> <pre><code>def read_from_text_file(file_path):\n    with open(file_path, 'r') as file:  # Open file in read mode\n        return file.read()  # Return the content of the file\n</code></pre> <p>Example Usage</p> <pre><code>write_to_text_file('example.txt', 'Hello, World!')\ncontent = read_from_text_file('example.txt')\nprint(content)\n</code></pre>"},{"location":"examples/data_structures/#2-csv-file","title":"2. CSV File","text":"<p>CSV (Comma-Separated Values) files are used to store tabular data.</p>"},{"location":"examples/data_structures/#template-function-for-csv-files","title":"Template Function for CSV Files","text":"<p>Writing to a CSV File</p> <pre><code>import csv\n\ndef write_to_csv(file_path, data):\n    with open(file_path, 'w', newline='') as file:  # Open file in write mode\n        writer = csv.writer(file)\n        writer.writerows(data)  # Write rows of data\n</code></pre> <p>Reading from a CSV File</p> <pre><code>def read_from_csv(file_path):\n    with open(file_path, 'r') as file:  # Open file in read mode\n        reader = csv.reader(file)\n        return list(reader)  # Convert rows to a list\n</code></pre> <p>Example Usage</p> <pre><code>data = [\n    ['Name', 'Age', 'Grade'],\n    ['Alice', 16, 'A'],\n    ['Bob', 17, 'B']\n]\nwrite_to_csv('students.csv', data)\n\ncontent = read_from_csv('students.csv')\nfor row in content:\n    print(row)\n</code></pre>"},{"location":"examples/data_structures/#3-json-file","title":"3. JSON File","text":"<p>JSON (JavaScript Object Notation) is used to store structured data, such as dictionaries or lists.</p>"},{"location":"examples/data_structures/#template-function-for-json-files","title":"Template Function for JSON Files","text":"<p>Writing to a JSON File</p> <pre><code>import json\n\ndef write_to_json(file_path, data):\n    with open(file_path, 'w') as file:  # Open file in write mode\n        json.dump(data, file, indent=4)  # Write data to the file in JSON format\n</code></pre> <p>Reading from a JSON File</p> <pre><code>def read_from_json(file_path):\n    with open(file_path, 'r') as file:  # Open file in read mode\n        return json.load(file)  # Load data from JSON file\n</code></pre> <p>Example Usage</p> <pre><code>data = {\n    'students': [\n        {'name': 'Alice', 'age': 16, 'grade': 'A'},\n        {'name': 'Bob', 'age': 17, 'grade': 'B'}\n    ]\n}\nwrite_to_json('students.json', data)\n\ncontent = read_from_json('students.json')\nprint(content)\n</code></pre>"},{"location":"examples/data_structures/#summary-of-file-types","title":"Summary of File Types","text":"File Type Python Module Best for Plain Text <code>open()</code> Storing simple text or logs CSV <code>csv</code> Tabular data JSON <code>json</code> Structured data (hierarchical) <p>Each of these functions can be adapted based on specific requirements. Let me know if you'd like further customizations or examples!</p>"},{"location":"examples/dictionary_best_practice/","title":"Dictionary Best Practice","text":""},{"location":"examples/dictionary_best_practice/#dictionary-best-practice","title":"Dictionary Best Practice","text":"<pre><code>### Checking if a key exists\n\nmy_dict = {\"name\": \"Kiran\", \"age\": 24}\nif \"name\" in my_dict:\n    print(my_dict[\"name\"])\nelse:\n    print(\"No name found\")\n\nmy_dict = {\"name\": \"Kiran\", \"age\": 24}\nprint(my_dict.get(\"name\", \"No name found\"))\n\n### Looping over keys and values\n\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\nfor key in my_dict:\n    print(key, my_dict[key])\n\nfor key, value in my_dict.items():\n    print(key, value)\n\n### Merging dictionaries\n\ndict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\ndict1.update(dict2)\nprint(dict1)\n\ndict1 = {\"a\": 1, \"b\": 2}\ndict2 = {\"b\": 3, \"c\": 4}\nnew_dict = {**dict1, **dict2}\nprint(new_dict)  # {'a': 1, 'b': 3, 'c': 4}\n\n### Using defaultdict\n\nfrom collections import defaultdict\nmy_dict = defaultdict(int)\nmy_dict[\"a\"] += 1  # Works, but is it needed?\n\nmy_dict = {}\nmy_dict[\"a\"] = my_dict.get(\"a\", 0) + 1\n\n### Large dictionary vs. generator\n\nmy_dict = {i: i**2 for i in range(10_000_000)}\n\ndef squared_numbers():\n    for i in range(10_000_000):\n        yield i, i**2\n\nmy_dict = dict(squared_numbers())\n\n### setdefault vs. get\n\ndata = {}\nif \"name\" not in data:\n    data[\"name\"] = \"kiran\"\n\ndata = {}\ndata.setdefault(\"name\", \"kiran\")\n\nname = data.setdefault(\"name\", some_expensive_function())\n\nname = data.get(\"name\", \"kiran\")\n\n### Counting items manually vs. using Counter\n\nwords = [\"apple\", \"banana\", \"apple\"]\nword_count = {}\nfor word in words:\n    word_count[word] = word_count.get(word, 0) + 1\n\nfrom collections import Counter\nword_count = Counter(words)\n</code></pre>"},{"location":"examples/f_strings/","title":"F Strings","text":"<p>F-strings (formatted string literals) in Python provide a concise and readable way to format strings.</p> <p>Below are comprehensive examples showcasing different use cases:</p>"},{"location":"examples/f_strings/#1-basic-usage","title":"1. Basic Usage","text":"<pre><code>name = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")\n</code></pre> <p>Output:</p> <pre><code>My name is Alice and I am 30 years old.\n</code></pre>"},{"location":"examples/f_strings/#2-expressions-inside-f-strings","title":"2. Expressions Inside F-strings","text":"<pre><code>a = 10\nb = 5\nprint(f\"Sum: {a + b}, Product: {a * b}, Division: {a / b:.2f}\")\n</code></pre> <p>Output:</p> <pre><code>Sum: 15, Product: 50, Division: 2.00\n</code></pre>"},{"location":"examples/f_strings/#3-calling-functions-inside-f-strings","title":"3. Calling Functions Inside F-strings","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(f\"{greet('Bob')}\")\n</code></pre> <p>Output:</p> <pre><code>Hello, Bob!\n</code></pre>"},{"location":"examples/f_strings/#4-formatting-numbers","title":"4. Formatting Numbers","text":"<pre><code>num = 1234567.89123\nprint(f\"Comma separated: {num:,}\")\nprint(f\"Rounded to 2 decimals: {num:.2f}\")\nprint(f\"Scientific notation: {num:.2e}\")\nprint(f\"Binary: {num:.0f} -&gt; {num:b}\")\nprint(f\"Hexadecimal: {num:x}\")\n</code></pre> <p>Output:</p> <pre><code>Comma separated: 1,234,567.89123\nRounded to 2 decimals: 1234567.89\nScientific notation: 1.23e+06\nBinary: 1234568 -&gt; 100101011010000001000\nHexadecimal: 12d6808\n</code></pre>"},{"location":"examples/f_strings/#5-padding-and-alignment","title":"5. Padding and Alignment","text":"<pre><code>text = \"Python\"\nprint(f\"Left aligned:   |{text:&lt;10}|\")\nprint(f\"Right aligned:  |{text:&gt;10}|\")\nprint(f\"Center aligned: |{text:^10}|\")\nprint(f\"Padded with *:  |{text:*^10}|\")\n</code></pre> <p>Output:</p> <pre><code>Left aligned:   |Python    |\nRight aligned:  |    Python|\nCenter aligned: |  Python  |\nPadded with *:  |Python|\n</code></pre>"},{"location":"examples/f_strings/#6-boolean-values","title":"6. Boolean Values","text":"<pre><code>value = True\nprint(f\"Boolean as integer: {int(value)}\")\n</code></pre> <p>Output:</p> <pre><code>Boolean as integer: 1\n</code></pre>"},{"location":"examples/f_strings/#7-formatting-dates-and-time","title":"7. Formatting Dates and Time","text":"<pre><code>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Current Date: {now:%Y-%m-%d}\")\nprint(f\"Current Time: {now:%H:%M:%S}\")\n</code></pre> <p>Output:</p> <pre><code>Current Date: 2025-02-27\nCurrent Time: 14:23:45\n</code></pre>"},{"location":"examples/f_strings/#8-nesting-f-strings","title":"8. Nesting F-strings","text":"<pre><code>name = \"Charlie\"\nage = 25\ninfo = f\"Name: {name}, Age: {age}\"\nprint(f\"User Info: {info}\")\n</code></pre> <p>Output:</p> <pre><code>User Info: Name: Charlie, Age: 25\n</code></pre>"},{"location":"examples/f_strings/#9-using-dictionaries-inside-f-strings","title":"9. Using Dictionaries Inside F-strings","text":"<pre><code>person = {\"name\": \"David\", \"age\": 35}\nprint(f\"Name: {person['name']}, Age: {person['age']}\")\n</code></pre> <p>Output:</p> <pre><code>Name: David, Age: 35\n</code></pre>"},{"location":"examples/f_strings/#10-using-lists-and-tuples-inside-f-strings","title":"10. Using Lists and Tuples Inside F-strings","text":"<pre><code>fruits = [\"Apple\", \"Banana\", \"Cherry\"]\nprint(f\"My favorite fruit is {fruits[1]}.\")\n\ncoords = (10.5, 20.8)\nprint(f\"Coordinates: x={coords[0]}, y={coords[1]}\")\n</code></pre> <p>Output:</p> <pre><code>My favorite fruit is Banana.\nCoordinates: x=10.5, y=20.8\n</code></pre>"},{"location":"examples/f_strings/#11-using-object-attributes-in-f-strings","title":"11. Using Object Attributes in F-strings","text":"<pre><code>class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\nmy_car = Car(\"Toyota\", \"Camry\")\nprint(f\"My car is a {my_car.make} {my_car.model}.\")\n</code></pre> <p>Output:</p> <pre><code>My car is a Toyota Camry.\n</code></pre>"},{"location":"examples/f_strings/#12-using-object-methods-in-f-strings","title":"12. Using Object Methods in F-strings","text":"<pre><code>class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        return \"Woof!\"\n\ndog = Dog(\"Rex\")\nprint(f\"{dog.name} says {dog.bark()}\")\n</code></pre> <p>Output:</p> <pre><code>Rex says Woof!\n</code></pre>"},{"location":"examples/f_strings/#13-using-ternary-operator-inside-f-strings","title":"13. Using Ternary Operator Inside F-strings","text":"<pre><code>x = 10\ny = 20\nprint(f\"The bigger number is {x if x &gt; y else y}.\")\n</code></pre> <p>Output:</p> <pre><code>The bigger number is 20.\n</code></pre>"},{"location":"examples/f_strings/#14-multiline-f-strings","title":"14. Multiline F-strings","text":"<pre><code>name = \"Eve\"\nage = 28\nbio = f\"\"\"\nName: {name}\nAge: {age}\nLocation: New York\n\"\"\"\nprint(bio)\n</code></pre> <p>Output:</p> <pre><code>Name: Eve\nAge: 28\nLocation: New York\n</code></pre>"},{"location":"examples/f_strings/#15-escaping-braces-in-f-strings","title":"15. Escaping Braces in F-strings","text":"<pre><code>print(f\"Use {{ and }} to display curly braces.\")\n</code></pre> <p>Output:</p> <pre><code>Use { and } to display curly braces.\n</code></pre>"},{"location":"examples/f_strings/#16-lambda-functions-inside-f-strings","title":"16. Lambda Functions Inside F-strings","text":"<pre><code>square = lambda x: x  2\nprint(f\"5 squared is {square(5)}\")\n</code></pre> <p>Output:</p> <pre><code>5 squared is 25\n</code></pre> <p>These examples cover basic usage, expressions, function calls, formatting, object attributes, data structures, and advanced techniques in f-strings. Would you like any additional modifications or explanations? \ud83d\ude80</p>"},{"location":"examples/list_example/","title":"Medium Articles Code Extract","text":""},{"location":"examples/list_example/#app-using-data-structures-inventory","title":"App using Data Structures Inventory","text":"<pre><code>inventory = []\n\ndef add_item(item_id, name, quantity, price):\n    item = {'id': item_id, 'name': name, 'quantity': quantity, 'price': price}\n    inventory.append(item)\n\ndef remove_item(item_id):\n    global inventory\n    for item in inventory:\n        if item['id'] == item_id:\n            inventory.remove(item)\n            break\n\ndef view_inventory():\n    for item in inventory:\n        print(\n            f\"ID: {item['id']}, Name: {item['name']}, Quantity: {item['quantity']}, Price: {item['price']}\"\n        )\n\nwhile True:\n    print(\"1. Add Item\")\n    print(\"2. Remove Item\")\n    print(\"3. Update Quantity\")\n    print(\"4. View Inventory\")\n    print(\"5. Exit\")\n    choice = input(\"Enter choice:\")\n    # handle choices...\n    if choice == '5':\n        break\n    else:\n        print(\"Invalid choice. Please try again.\")\n</code></pre>"},{"location":"examples/re/","title":"Regular Expressions","text":""},{"location":"examples/re/#python-re-module-comprehensive-cheatsheet-examples","title":"Python <code>re</code> Module: Comprehensive Cheatsheet &amp; Examples","text":"<p>The <code>re</code> module in Python provides support for regular expressions (regex), allowing you to search, match, and manipulate text efficiently.</p>"},{"location":"examples/re/#1-basic-functions-in-re-module","title":"1. Basic Functions in <code>re</code> Module","text":"Function Description <code>re.match(pattern, string)</code> Matches pattern at the beginning of the string <code>re.search(pattern, string)</code> Searches anywhere in the string <code>re.findall(pattern, string)</code> Returns all non-overlapping matches as a list <code>re.finditer(pattern, string)</code> Returns an iterator yielding <code>MatchObject</code> instances <code>re.split(pattern, string)</code> Splits the string by occurrences of the pattern <code>re.sub(pattern, repl, string)</code> Replaces occurrences of pattern with <code>repl</code> <code>re.subn(pattern, repl, string)</code> Like <code>re.sub()</code>, but returns a tuple with count of substitutions <code>re.compile(pattern)</code> Compiles a regex pattern for reuse"},{"location":"examples/re/#2-meta-characters-their-meaning","title":"2. Meta Characters &amp; Their Meaning","text":"Meta Character Meaning Example <code>.</code> Any character except newline <code>r\"a.b\"</code> matches <code>\"acb\"</code>, <code>\"axb\"</code> <code>^</code> Start of string <code>r\"^hello\"</code> matches <code>\"hello world\"</code> <code>$</code> End of string <code>r\"world$\"</code> matches <code>\"hello world\"</code> <code>*</code> 0 or more repetitions <code>r\"ab*\"</code> matches <code>\"a\"</code>, <code>\"ab\"</code>, <code>\"abb\"</code> <code>+</code> 1 or more repetitions <code>r\"ab+\"</code> matches <code>\"ab\"</code>, <code>\"abb\"</code>, but not <code>\"a\"</code> <code>?</code> 0 or 1 occurrence <code>r\"colou?r\"</code> matches <code>\"color\"</code> and <code>\"colour\"</code> <code>{n}</code> Exactly n times <code>r\"\\d{3}\"</code> matches <code>\"123\"</code> but not <code>\"12\"</code> <code>{n,}</code> n or more times <code>r\"\\d{2,}\"</code> matches <code>\"12\"</code>, <code>\"123\"</code>, <code>\"1234\"</code> <code>{n,m}</code> Between n and m times <code>r\"\\d{2,4}\"</code> matches <code>\"12\"</code>, <code>\"123\"</code>, <code>\"1234\"</code> but not <code>\"1\"</code> <code>\\</code> Escape special characters <code>r\"\\.\"</code> matches a literal <code>\".\"</code> <code>[]</code> Character set <code>r\"[aeiou]\"</code> matches any vowel <code>[^]</code> Negated character set <code>r\"[^aeiou]\"</code> matches any non-vowel <code>\\|</code> OR (alternation) <code>r\"yes\\|no\"</code> matches <code>\"yes\"</code> or <code>\"no\"</code> <code>()</code> Grouping <code>r\"(abc)+\"</code> matches <code>\"abc\"</code>, <code>\"abcabc\"</code>"},{"location":"examples/re/#3-special-sequences","title":"3. Special Sequences","text":"Pattern Meaning Example <code>\\d</code> Digit (<code>0-9</code>) <code>r\"\\d+\"</code> matches <code>\"123\"</code> <code>\\D</code> Non-digit <code>r\"\\D+\"</code> matches <code>\"abc\"</code> <code>\\w</code> Word character (<code>a-z, A-Z, 0-9, _</code>) <code>r\"\\w+\"</code> matches <code>\"hello_123\"</code> <code>\\W</code> Non-word character <code>r\"\\W+\"</code> matches <code>\"#@\"</code> <code>\\s</code> Whitespace (<code>space, tab, newline</code>) <code>r\"\\s+\"</code> matches <code>\" \"</code> <code>\\S</code> Non-whitespace <code>r\"\\S+\"</code> matches <code>\"Hello\"</code> <code>\\b</code> Word boundary <code>r\"\\bcat\\b\"</code> matches <code>\"cat\"</code>, but not <code>\"scatter\"</code> <code>\\B</code> Not a word boundary <code>r\"\\Bcat\\B\"</code> matches <code>\"scatter\"</code>"},{"location":"examples/re/#4-using-rematch","title":"4. Using <code>re.match()</code>","text":"<ul> <li>Matches only at the beginning of the string</li> </ul> <pre><code>import re\nresult = re.match(r\"\\d+\", \"123abc\")\nprint(result.group())  # Output: 123\n</code></pre> <pre><code>result = re.match(r\"\\d+\", \"abc123\")\nprint(result)  # Output: None\n</code></pre>"},{"location":"examples/re/#5-using-research","title":"5. Using <code>re.search()</code>","text":"<ul> <li>Finds first occurrence anywhere in the string</li> </ul> <pre><code>import re\nresult = re.search(r\"\\d+\", \"abc123def456\")\nprint(result.group())  # Output: 123\n</code></pre>"},{"location":"examples/re/#6-using-refindall","title":"6. Using <code>re.findall()</code>","text":"<ul> <li>Finds all occurrences of the pattern</li> </ul> <pre><code>import re\nresult = re.findall(r\"\\d+\", \"abc123def456\")\nprint(result)  # Output: ['123', '456']\n</code></pre>"},{"location":"examples/re/#7-using-refinditer","title":"7. Using <code>re.finditer()</code>","text":"<ul> <li>Returns an iterator of match objects</li> </ul> <pre><code>import re\nfor match in re.finditer(r\"\\d+\", \"abc123def456\"):\n    print(match.group())  # Output: 123, 456\n</code></pre>"},{"location":"examples/re/#8-using-resplit","title":"8. Using <code>re.split()</code>","text":"<pre><code>import re\nresult = re.split(r\"\\s+\", \"Hello   World  Python\")\nprint(result)  # Output: ['Hello', 'World', 'Python']\n</code></pre>"},{"location":"examples/re/#9-using-resub","title":"9. Using <code>re.sub()</code>","text":"<pre><code>import re\nresult = re.sub(r\"\\d+\", \"X\", \"abc123def456\")\nprint(result)  # Output: abcXdefX\n</code></pre>"},{"location":"examples/re/#10-using-recompile","title":"10. Using <code>re.compile()</code>","text":"<ul> <li>Pre-compiling regex patterns for better performance</li> </ul> <pre><code>import re\npattern = re.compile(r\"\\d+\")\nresult = pattern.findall(\"abc123def456\")\nprint(result)  # Output: ['123', '456']\n</code></pre>"},{"location":"examples/re/#11-greedy-vs-non-greedy-matching","title":"11. Greedy vs. Non-Greedy Matching","text":"Type Pattern Example Matches Greedy <code>r\"&lt;.*&gt;\"</code> <code>&lt;b&gt;hello&lt;/b&gt;</code> <code>&lt;b&gt;hello&lt;/b&gt;</code> Non-Greedy <code>r\"&lt;.*?&gt;\"</code> <code>&lt;b&gt;hello&lt;/b&gt;</code> <code>&lt;b&gt;</code> <pre><code>import re\ntext = \"&lt;b&gt;hello&lt;/b&gt;\"\nprint(re.findall(r\"&lt;.*&gt;\", text))  # Output: ['&lt;b&gt;hello&lt;/b&gt;']\nprint(re.findall(r\"&lt;.*?&gt;\", text)) # Output: ['&lt;b&gt;', '&lt;/b&gt;']\n</code></pre>"},{"location":"examples/re/#12-named-groups-in-re","title":"12. Named Groups in <code>re</code>","text":"<pre><code>import re\nresult = re.search(r\"(?P&lt;first&gt;\\w+) (?P&lt;last&gt;\\w+)\", \"John Doe\")\nprint(result.group(\"first\"))  # Output: John\nprint(result.group(\"last\"))   # Output: Doe\n</code></pre>"},{"location":"examples/re/#13-lookaheads-lookbehinds","title":"13. Lookaheads &amp; Lookbehinds","text":"Type Pattern Example Matches Positive Lookahead <code>r\"foo(?=bar)\"</code> <code>\"foobar foo123\"</code> <code>\"foo\"</code> Negative Lookahead <code>r\"foo(?!bar)\"</code> <code>\"foobar foo123\"</code> <code>\"foo\"</code> Positive Lookbehind <code>r\"(?&lt;=\\$)\\d+\"</code> <code>\"$100 \u20ac200\"</code> <code>\"100\"</code> Negative Lookbehind <code>r\"(?&lt;!\\$)\\d+\"</code> <code>\"$100 \u20ac200\"</code> <code>\"200\"</code> <pre><code>import re\nprint(re.findall(r\"foo(?=bar)\", \"foobar foo123\"))  # Output: ['foo']\nprint(re.findall(r\"(?&lt;=\\$)\\d+\", \"$100 \u20ac200\"))  # Output: ['100']\n</code></pre>"},{"location":"examples/re/#14-case-insensitive-matching","title":"14. Case-Insensitive Matching","text":"<pre><code>import re\nresult = re.search(r\"hello\", \"HELLO\", re.IGNORECASE)\nprint(result.group())  # Output: HELLO\n</code></pre>"},{"location":"examples/re/#15-multi-line-dotall-mode","title":"15. Multi-line &amp; Dotall Mode","text":"<pre><code>import re\ntext = \"First line\\nSecond line\"\nprint(re.findall(r\"^Second\", text, re.MULTILINE))  # Output: ['Second']\nprint(re.findall(r\"First.*Second\", text, re.DOTALL))  # Output: ['First line\\nSecond']\n</code></pre> <p>This cheatsheet should cover most of what you need to work with regular expressions in Python efficiently! \ud83d\ude80 Let me know if you need more advanced examples.</p>"},{"location":"examples/stocks_data/","title":"Pandas","text":""},{"location":"examples/stocks_data/#stock-data","title":"Stock Data","text":"<p>Here\u2019s a step-by-step guide with Python code to scrape the S&amp;P 500 stocks from Wikipedia and use the <code>yfinance</code> library to retrieve stock information, historical data, financial statements, holders, and dividend activity.</p>"},{"location":"examples/stocks_data/#1-get-sp-500-stocks-from-wikipedia","title":"1. Get S&amp;P 500 Stocks from Wikipedia","text":"<p>Library: Use <code>pandas</code> for scraping the table.</p> <pre><code>import pandas as pd\n\ndef get_sp500_stocks():\n    url = \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n    tables = pd.read_html(url)\n    sp500_table = tables[0]  # First table contains the S&amp;P 500 data\n    return sp500_table[['Symbol', 'Security']]  # Return only ticker and company name\n\n# Example Usage\nsp500_stocks = get_sp500_stocks()\nprint(sp500_stocks.head())\n</code></pre>"},{"location":"examples/stocks_data/#2-get-historical-data-using-yfinance","title":"2. Get Historical Data Using <code>yfinance</code>","text":"<p>Library: Use <code>yfinance</code> to fetch historical data.</p> <pre><code>import yfinance as yf\n\ndef get_historical_data(tickers, start_date='2020-01-01', end_date='2024-01-01'):\n    historical_data = {}\n    for ticker in tickers:\n        stock = yf.Ticker(ticker)\n        data = stock.history(start=start_date, end=end_date)\n        historical_data[ticker] = data\n    return historical_data\n\n# Example Usage: Get historical data for the top 5 stocks by market cap\ntop_tickers = sp500_stocks['Symbol'].head(5).tolist()\nhistorical_data = get_historical_data(top_tickers)\nfor ticker, data in historical_data.items():\n    print(f\"Historical data for {ticker}:\")\n    print(data.head())\n</code></pre>"},{"location":"examples/stocks_data/#3-get-stock-info","title":"3. Get Stock Info","text":"<p>Use <code>info</code> from <code>yfinance</code>.</p> <pre><code>def get_stock_info(ticker):\n    stock = yf.Ticker(ticker)\n    return stock.info  # Returns a dictionary with stock information\n\n# Example Usage\nticker = 'AAPL'  # Replace with any ticker\ninfo = get_stock_info(ticker)\nprint(f\"Stock Info for {ticker}:\")\nprint(info)\n</code></pre>"},{"location":"examples/stocks_data/#4-get-financial-statements","title":"4. Get Financial Statements","text":"<p>Fetch annual and quarterly financials like income statements, cash flow, and balance sheets.</p> <pre><code>def get_financial_statements(ticker):\n    stock = yf.Ticker(ticker)\n    return {\n        'annual_income_statement': stock.financials,\n        'quarterly_income_statement': stock.quarterly_financials,\n        'annual_balance_sheet': stock.balance_sheet,\n        'quarterly_balance_sheet': stock.quarterly_balance_sheet,\n        'annual_cash_flow': stock.cashflow,\n        'quarterly_cash_flow': stock.quarterly_cashflow,\n    }\n\n# Example Usage\nticker = 'AAPL'\nfinancials = get_financial_statements(ticker)\nprint(f\"Annual Income Statement for {ticker}:\")\nprint(financials['annual_income_statement'])\n</code></pre>"},{"location":"examples/stocks_data/#5-get-holders-institutional-and-insider","title":"5. Get Holders (Institutional and Insider)","text":"<p>Retrieve holder information.</p> <pre><code>def get_holders(ticker):\n    stock = yf.Ticker(ticker)\n    return {\n        'institutional_holders': stock.institutional_holders,\n        'major_holders': stock.major_holders,\n        'insider_holders': stock.insider_holders\n    }\n\n# Example Usage\nticker = 'AAPL'\nholders = get_holders(ticker)\nprint(f\"Institutional Holders for {ticker}:\")\nprint(holders['institutional_holders'])\n</code></pre>"},{"location":"examples/stocks_data/#6-get-dividend-activity","title":"6. Get Dividend Activity","text":"<p>Extract dividend data.</p> <pre><code>def get_dividend_activity(ticker):\n    stock = yf.Ticker(ticker)\n    dividends = stock.dividends\n    if dividends.empty:\n        return f\"No dividend data for {ticker}.\"\n    return dividends\n\n# Example Usage\nticker = 'AAPL'\ndividends = get_dividend_activity(ticker)\nprint(f\"Dividend Activity for {ticker}:\")\nprint(dividends)\n</code></pre>"},{"location":"examples/stocks_data/#7-summary-script-to-combine-all-functions","title":"7. Summary Script to Combine All Functions","text":"<p>Here\u2019s how to tie everything together:</p> <pre><code>def get_stock_data(ticker):\n    return {\n        'info': get_stock_info(ticker),\n        'historical_data': get_historical_data([ticker]),\n        'financial_statements': get_financial_statements(ticker),\n        'holders': get_holders(ticker),\n        'dividends': get_dividend_activity(ticker),\n    }\n\n# Example Usage\nticker = 'AAPL'\nstock_data = get_stock_data(ticker)\nprint(f\"Full data for {ticker}:\")\nprint(stock_data)\n</code></pre>"},{"location":"examples/stocks_data/#required-libraries","title":"Required Libraries","text":"<p>Install the necessary libraries:</p> <pre><code>pip install pandas yfinance lxml\n</code></pre> <p>This script covers fetching:</p> <ol> <li>S&amp;P 500 tickers from Wikipedia.</li> <li>Historical data for selected stocks.</li> <li>Info, financials, holders, and dividends for a single ticker or a batch of tickers.</li> </ol> <p>Let me know if you\u2019d like enhancements or detailed handling for any specific section!</p>"},{"location":"medium/","title":"Medium Articles","text":"<p>List of medium articles</p>"},{"location":"medium/tree/","title":"Medium Tree","text":"<ul> <li>/mnt/c/Users/lpres/OneDrive/Documents/MediumPdf</li> </ul> <pre><code>\u251c\u2500\u2500 algotrade\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 19_BB_MACD_Stochastic.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Backtesting the Power of VWAP, RSI, and ATR_ An Analytical Journey! _ by Unicorn Day _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Best Pandas Tricks for Data Manipulation and Analysis _ Towards Dev.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 From Backtest to Real Trading_ Building a Complete Python Trading System for SYF Stock _ by Kridtapon P. _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 How Selling Put Options Transformed My Portfolio _ by Anil Jangra, MBA _ Investor\u2019s Handbook _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 I used OpenAI\u2019s brand new O3-mini model to create a trading strategy. It\u2019s DESTROYING the market _ by Austin Starks _ Jan, 2025 _ DataDrivenInvestor.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Identify High Value Stocks with the Piotroski F-Score _ by Cristian Velasquez _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Identifying a Volatility Squeeze Algorithmically _ by Cristian Velasquez _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Implied Volatility Analysis for Insights on Market Sentiment _ by Cristian Velasquez _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ AlgoTrade _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Mastering Momentum_ 5 Rare Indicators Every Trader Should Know _ by Kridtapon P. _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Neural Networks for Time Series with Tensorflow Keras in Python _ by Kyle Jones _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Spot Reversals Effortlessly_ The Ultimate RSI and MACD Strategy for Traders _ by Sayedali _ Dec, 2024 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Stock Data Collection using Yahoo Finance and Sentiment Analysis for Price Prediction _ by Sudarshan Sharma Paudel _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Uncover Hidden Market Trends with the On Balance Volume (OBV) Indicator and Python _ by Muhammed Burak Bedir _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a01_Algorithmic_Trading_Strategy Tester.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a01_Bayesian_Optimization_StopLoss.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a02_Moving Hurst Indicator.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a03_Backtesting_Strategies_Backtrader.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a04_Momentum_Strategies_with_Backtesting.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a05_Random_Forest.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a06_Volatility Indicators.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a07_CCI.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a08_VWAP_EMA_RSI.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a09_VWAP_EMA_RSI.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a10_Ensemble_Models.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a11_Optimal_DOW_DOM_DBE_to_Invest.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a12_GBC_SMA_vs_ Buy &amp; Hold.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a13_Moving_Average_Confluence_Zones.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a14_OBV-MACD-Camarilla.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a15_Camarilla.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a15_Odds-Rate-Risk-Sharpe-Ratio.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a16_Relative Volatility Index (RVI).pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a17_indicators.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a18_Ensemble Models for Time Series Forecasting.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 results_df.csv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc8\ud83d\udd2e Build Your Own Stock Price Prediction Model_ A Step-by-Step Guide \ud83d\ude80\ud83d\udcca _ by Unicorn Day _ Medium.pdf\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Building a Production-Ready FastAPI-Based Python App Serving Online and Offline Requests _ by VerticalServe Blogs _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python Projects_ Create 5 Practical Applications from Scratch _ by Frost _ T3CH _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Which Python Dashboard Is Better_ Dash, Panel And Streamlit Showdown _ by John Loewen, PhD _ Feb, 2025 _ Towards AI.pdf\n\u251c\u2500\u2500 books\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 I Read 40 Books in 2024, These 5 Dramatically Improved My Life _ by Raja Sekar _ The Useful Life _ Dec, 2024 _ Medium.pdf\n\u251c\u2500\u2500 dashboard\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Portfolio_Positions_Feb-20-2025.csv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 x01_Stock Alerts System.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x02_Rich Based TUI.pdf\n\u251c\u2500\u2500 datsci\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10 Python Packages For Data Science _ by Ankita _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10 Top Python Libraries Every Quant in Finance Should Know _ by Kridtapon P. _ Dec, 2024 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 20 Advanced Statistical Approaches Every Data Scientist Should Know \ud83d\udc31_\ud83d\ude80 _ by Sarowar Jahan Saurav _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 6 Python Libraries to Enhance Your ML Projects _ by Niveatha Manickavasagam _ Code Like A Girl.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 8 Powerful Python Libraries to Create Block Diagrams and Flowcharts _ by Ajay Parmar _ Top Python Libraries _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 9 Best Python Libraries for Machine Learning _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 9 Statistical Distributions Every Data Scientist Should\u00a0Know _ Artificial Intelligence in Plain English.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Anomaly Detection in Time Series Data with Python _ by Kyle Jones _ Level Up Coding.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Supercharge Your Data Analysis_ 10 Python Libraries That Unlock Hidden Insights _ by Rahul Sharma _ CodeX _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Using Classification Models for Time Series Forecasting with Python _ by Kyle Jones _ Dec, 2024 _ Medium.pdf\n\u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_DuckDB_Query_Data.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_Convert Tables into JSON, YAML,  XML Format.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 03_Geospatial Coordinate Systems.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 04_Free APIs.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 05_tqdm ruff rich pydantic.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 9 Python-Powered Tools to Instantly 03_Formatting.pdf\n\u251c\u2500\u2500 deepseek\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 35 AI Side Hustle Ideas That Work _ by Paul Rose _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 A Simple Guide to DeepSeek R1_ Architecture, Training, Local Deployment, and Hardware Requirements _ by Isaak Kamau _ Jan, 2025 _ Medium.pdf\n\u251c\u2500\u2500 gui\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GUI Frameworks in 2025.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 GUI Libraries_ PyQt, Kivy, Tkinter, PySimpleGUI, WxPython, and PySide.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Tkinter Buttons.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 desktop.ini\n\u251c\u2500\u2500 helper\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Essential Python Scripts to Automate Tasks for System Admins _ by Obafemi _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 How to Automate Your Daily Tasks with Python_ 5 Advanced Scripts for Real Productivity _ by Sagar Sangwan _ Feb, 2025 _ AWS Tip.pdf\n\u251c\u2500\u2500 llama\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Building a 2 Billion Parameter LLM from Scratch Using Python _ by Fareed Khan _ Jan, 2025 _ Level Up Coding.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Docling _ Transform any document into LLM ready data in just a few lines of python code! _ by DataScience Nexus _ Coding Nexus _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 How a Small Language Model Can Achieve 100% Accuracy _ by Fabio Matricardi _ Jan, 2025 _ Generative AI.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 How to run GPT-4o Mini with OpenAI API, LlamaIndex, and LangChain. _ by Kris Ograbek _ AI Advances.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Ollama_ The Ultimate Tool for Running Language Models Locally _ by Okan Yenig\u00fcn _ DevOps.dev.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Running Large Language Models (LLMs) on CPU using llama.cpp _ by Wei-Meng Lee _ Feb, 2025 _ AI Advances.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Running Ollama\u2019s LLaMA 3.2 Vision Model on Google Colab \u2014 Free and Easy Guide _ by Shobhit Agarwal _ Generative AI.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Tips and Tricks for Using Ollama. Learn how to change the models folder\u2026 _ by Wei-Meng Lee _ Jan, 2025 _ AI Advances.pdf\n\u251c\u2500\u2500 mathstat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Bionomial Distribution with Python _ by Gianpiero Andrenacci _ Data Bistrot _ Jan, 2025 _ Medium.pdf\n\u251c\u2500\u2500 medium_tree.md\n\u251c\u2500\u2500 monetize\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 $50_Hour Remote Jobs You Can Start Without Interviews _ by DataScience Nexus _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 11 \u201cBoring\u201d Websites Making Over $1.7 Million per Month \u2014 And Why Simplicity Sells _ by DataScience Nexus _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Earning on Your Own Schedule_ How to Make Money with Micro-Tasks \ud83d\udd52\ud83d\udcb0 _ by Coders Stop _ Feb, 2025 _ Stackademic.pdf\n\u251c\u2500\u2500 pandas\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 11-Hidden Pandas Functions You Didn\u2019t Know You Could Do with NumPy _ by Ajay Parmar _ Top Python Libraries _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 9 Pandas Tricks Every Data Scientist Should Know _ by U\u011furcan Demir _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Advanced Pandas Techniques for Data Processing and Performance _ by Pratheesh Shivaprasad _ Towards Data Science _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Everything You Need To Know About PandasGUI.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Five Common Python Libraries for ETL Processing _ by Gen. David L. _ Dec, 2024 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Generate Reports Using Pandas Profiling.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 How to Map Column Values in a Pandas DataFrame_ _ by Gen. Devin DL. _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 How to Style Pandas DataFrames for Better Visualization.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Implementing a Database System with DuckDB for Local Processing and MotherDuck for Scalable Cloud Storage _ by Jesus L. Monroy _ T3CH _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Must-Know Python Pandas Functions for Effortless Data Exploration _ by Gen. David L. _ Nov, 2024 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Pandas DF Tricks  Brent Fischer.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python Pandas_ loc and iloc. How to Select and Filter Data in Python _ by Python Fundamentals _ Towards Dev.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python by Examples_ Mastering Pandas DataFrames (1 of 2) _ by MB20261 _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Why I Stopped Using Pandas\u2019 describe() Method_ Two Libraries That Do It Better _ by DataScience Nexus _ Coding Nexus _ Jan, 2025 _ Medium.pdf\n\u251c\u2500\u2500 pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_Create Interactive Forms.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_Extract Form Data.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 03_Read or Extract Text.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 04_Merge Files or Pages into One.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 05_Split PDF Files or Pages.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 06_Convert to docx .pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 07_Firefox PDF Editing Feature.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 08_Preview Mac Free Editor.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 09_Convert to Images (PNG, JPG, BMP, EMF).pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 10_Various_Extraction_Tools.pdf\n\u251c\u2500\u2500 pypi\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 MarkItDown.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 The ultimate note-taking solution \u2014 2nd Edition _ by \ud83c\udccfMunaf \u2705\ufe0f _ Jan, 2025 _ Medium.pdf\n\u251c\u2500\u2500 python\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 00_Data Structures_Inventory_App.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_Dict_Tips.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_Lists_Power_Examples.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_Numpy_Cheatsheet.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 03_Re.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 04_Classes.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 06_Iterator Functions.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 06_Iterator.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 07_Automate the Execution.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 08_Raw Data to Reports.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 09_Command Line 2.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 09_Command-Line.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10 Automation Scripts  Your Daily Tasks.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10_Automation Scripts 1.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10_Automation Scripts 2.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10_Automation Scripts 3.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10_Automation Scripts 4 .pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 10_Automation Scripts 5.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 11_Functions for Data Science.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 11_Functions for Data Scientist.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 12_Features.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 13_Environment Variables.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 14_CuPy_GPU Computing.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 15_Charts.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 16_Configuration File.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 17_Dashboard.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 18_Parse HTML.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 19_File Reading and Writing.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 20_Tabulate Formats.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 21_Enums.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 99_Plyer_Notification.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python Fundamentals \u2013 Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python Logging Best Practices. How to Implement Effective Logging in\u2026 _ by Rexs _ Top Python Libraries _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python Tricks for Automating Your Everyday Tasks _ by Muhammad Naveed Arshad,MSc _Writer_Editor_ AI Engr _ Nov, 2024 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Python\u2019s _args and __kwargs Explained Under 5 Minutes _ by Konstantin Mogilevskii _ Level Up Coding.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Stop Wasting Time in Excel_ Let Python Do the Work _ by Raphael Schols _ Nov, 2024 _ Python in Plain English.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Top 10 Python Libraries for Everyday Automation_ Unlocking Efficiency Beyond the Basics _ by Coders Stop _ Python in Plain English.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Top 128 Utile Python Libraries for Aspiring Data Scientists to Try _ by Alexzap _ Dec, 2024 _ Python in Plain English.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Top 20 Utile Python Libs.gdoc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Top 9 Must-Know Python Open Source Projects for 2025 _ by Let's Code Future _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Useful Python libraries you might not know existed \u2014 Questionary _ by Thomas Reid _ Jan, 2025 _ Level Up Coding.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Write Your own jq tool in python. jq is a lightweight and powerful\u2026 _ by Arjun _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83c\udf0d How to Create Stunning Interactive Maps in Python (Without Google Maps API) \ud83d\uddfa\ufe0f _ by Kuldeepkumawat _ Medium.pdf\n\u251c\u2500\u2500 scrape\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 8 Mastering IP Protection Using Delays and Rotation in Scraping _ by Ajay Parmar _ Top Python Libraries _ Feb, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Extracting Stock URLs and Saving to CSV_ A Python Web Scraping Guide _ by Shoeb Ahmed _ CodeX _ Jan, 2025 _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 How to Scrape Google Flights Data with Python _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Probably The Easiest Way To Automate Web Tasks Using Python _ by Christopher Tao _ CodeX _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Project 3 - Scrape 2000+ BBC News Using Python _ by Mohsin Shaikh _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Scrapy_ The Ultimate Guide to Web Scraping with Python _ by Amir Hamjah _ skilledprogrammer _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Web Scraping Secrets_ Build Your First Python Data Extractor _ The Pythoneers.pdf\n\u251c\u2500\u2500 ubuntu\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 MacOS_ Building the Perfect Development Machine in 2025 _ by Promise Chukwuenyem _ Jan, 2025 _ Level Up Coding.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Setup Ubuntu 24.04 as a daily driver machine, detailed steps and troubleshooting _ by Andrew Zhu _ Medium.pdf\n\u251c\u2500\u2500 unfiled\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 50 Python features, tips &amp; tricks that you don\u2019t know _ Dev Genius.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ A1 _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ AlgoTrade _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ CodeMe _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ Later _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ Ollama _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ Reading list _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ TradingView _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ Web _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ audio_video _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 List_ chatgpt _ Curated by Larrimer Prestosa _ Medium.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Python Fundamentals \u2013 Medium.pdf\n\u251c\u2500\u2500 utils\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_Shell Commands.pdf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_Automation.pdf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 03_Vim_Tutorial.pdf\n\u2514\u2500\u2500 website\n    \u251c\u2500\u2500 Building a Data Dashboard. Using the streamlit Python library _ by Thomas Reid _ Jan, 2025 _ Towards Data Science.pdf\n    \u251c\u2500\u2500 Building a Simple Sign-Up Page with Streamlit\u2026 and a Sneaky Admin Panel! \ud83d\udc40 _ by Unicorn Day _ Medium.pdf\n    \u251c\u2500\u2500 Create Your Own Interactive Stock Animation Tool in Streamlit _ by Unicorn Day _ Dec, 2024 _ Medium.pdf\n    \u251c\u2500\u2500 FastAPI vs Flask_ Choosing the Best for App Development.pdf\n    \u251c\u2500\u2500 Frontend, Backend &amp; Database Using Python_ Anvil _ by Kaustubh Gupta _ Level Up Coding.pdf\n    \u251c\u2500\u2500 How to Build a Simple Python Script with a Web Interface for Data Transformation _ by Sagar Sangwan _ Jan, 2025 _ AWS Tip.pdf\n    \u251c\u2500\u2500 PyWebIO _ Deploy Machine Learning Models using PyWebIO.pdf\n    \u251c\u2500\u2500 Python\u2019s Streamlit vs. Dash_ Building Stunning Data Dashboards _ by Coders Stop _ Jan, 2025 _ Medium.pdf\n    \u251c\u2500\u2500 Run Python Code on Websites_ Exploring Brython _ Towards Data Science.pdf\n    \u2514\u2500\u2500 \ud83d\ude80 Build &amp; Deploy a Python Web App with Streamlit in 30 Minutes \u23f1\ufe0f\u2728 _ by Muhammad Naveed Arshad,MSc _Writer_Editor_ AI Engr _ Jan, 2025 _ Medium.pdf\n\n21 directories, 184 files\n</code></pre>"},{"location":"mkdocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#displaying-mkdocsyml","title":"Displaying mkdocs.yml","text":""},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/#deploy-to-github","title":"Deploy to Github","text":"<pre><code>#!/bin/bash\n\n# Check if a site name is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;site_name&gt;\"\n  exit 1\nfi\n\nSITE_NAME=$1\nPROJECT_DIR=\"/home/larry/mk/$SITE_NAME\"\n\n# Step 1: Navigate to project directory\ncd \"$PROJECT_DIR\" || { echo \"\u274c Directory not found!\"; exit 1; }\n\n# Step 2: Activate virtual environment\nsource venv/bin/activate\n\n# Step 3: Deploy MkDocs site\nmkdocs gh-deploy --force\n\necho \"\u2705 MkDocs site deployed for $SITE_NAME! Live at: https://blutterfly.github.io/$SITE_NAME/\"\n</code></pre>"},{"location":"pandas/","title":"Pandas","text":""}]}