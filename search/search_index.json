{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Documentation","text":"<p>Python knowledge base, code examples,  best practices, implementation.</p>"},{"location":"codex/","title":"Code Examples","text":""},{"location":"codex/#data-structures","title":"Data Structures","text":"<p>Here\u2019s a tutorial introducing Python data structures like lists, dictionaries, and dataframes in a simple way suitable for high school students.</p>"},{"location":"codex/#data-structures-in-python","title":"Data Structures in Python","text":""},{"location":"codex/#1-lists","title":"1. Lists","text":"<p>Lists are used to store multiple items in a single variable.</p>"},{"location":"codex/#creating-a-list","title":"Creating a List","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits)\n</code></pre>"},{"location":"codex/#accessing-items","title":"Accessing Items","text":"<pre><code>print(fruits[0])  # First item\nprint(fruits[-1])  # Last item\n</code></pre>"},{"location":"codex/#modifying-lists","title":"Modifying Lists","text":"<pre><code>fruits.append(\"orange\")  # Add an item\nfruits[1] = \"blueberry\"  # Change an item\nprint(fruits)\n</code></pre>"},{"location":"codex/#iterating-through-a-list","title":"Iterating Through a List","text":"<pre><code>for fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"codex/#common-list-methods","title":"Common List Methods","text":"<ul> <li><code>append(item)</code>: Add an item</li> <li><code>remove(item)</code>: Remove an item</li> <li><code>len(list)</code>: Get the number of items</li> <li><code>sort()</code>: Sort the list</li> </ul>"},{"location":"codex/#exercise","title":"Exercise:","text":"<ol> <li>Create a list of your favorite hobbies.</li> <li>Add a new hobby to the list.</li> <li>Print each hobby using a loop.</li> </ol>"},{"location":"codex/#2-dictionaries","title":"2. Dictionaries","text":"<p>Dictionaries store data in key-value pairs.</p>"},{"location":"codex/#creating-a-dictionary","title":"Creating a Dictionary","text":"<pre><code>student = {\"name\": \"Alex\", \"age\": 16, \"grade\": \"A\"}\nprint(student)\n</code></pre>"},{"location":"codex/#accessing-items_1","title":"Accessing Items","text":"<pre><code>print(student[\"name\"])  # Access value by key\n</code></pre>"},{"location":"codex/#addingupdating-keys","title":"Adding/Updating Keys","text":"<pre><code>student[\"school\"] = \"High School\"  # Add a new key\nstudent[\"grade\"] = \"A+\"  # Update value\nprint(student)\n</code></pre>"},{"location":"codex/#iterating-through-a-dictionary","title":"Iterating Through a Dictionary","text":"<pre><code>for key, value in student.items():\n    print(key, \":\", value)\n</code></pre>"},{"location":"codex/#common-dictionary-methods","title":"Common Dictionary Methods","text":"<ul> <li><code>keys()</code>: Get all keys</li> <li><code>values()</code>: Get all values</li> <li><code>items()</code>: Get all key-value pairs</li> </ul>"},{"location":"codex/#exercise_1","title":"Exercise:","text":"<ol> <li>Create a dictionary with details about your favorite book (title, author, year).</li> <li>Add a new key for the genre.</li> <li>Print all the keys and values.</li> </ol>"},{"location":"codex/#3-dataframes-using-pandas","title":"3. DataFrames (Using pandas)","text":"<p>What is a DataFrame? A DataFrame is a 2-dimensional table-like data structure in the pandas library. Think of it as a spreadsheet.</p>"},{"location":"codex/#setting-up-pandas","title":"Setting Up pandas","text":"<p>Make sure you have pandas installed:</p> <pre><code>pip install pandas\n</code></pre>"},{"location":"codex/#creating-a-dataframe","title":"Creating a DataFrame","text":"<pre><code>import pandas as pd\n\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [16, 17, 16],\n    \"Grade\": [\"A\", \"B\", \"A\"]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n</code></pre>"},{"location":"codex/#accessing-columns","title":"Accessing Columns","text":"<pre><code>print(df[\"Name\"])  # Access a single column\nprint(df[[\"Name\", \"Age\"]])  # Access multiple columns\n</code></pre>"},{"location":"codex/#filtering-rows","title":"Filtering Rows","text":"<pre><code>print(df[df[\"Age\"] &gt; 16])  # Students older than 16\n</code></pre>"},{"location":"codex/#adding-a-new-column","title":"Adding a New Column","text":"<pre><code>df[\"Passed\"] = [True, False, True]\nprint(df)\n</code></pre>"},{"location":"codex/#iterating-through-rows","title":"Iterating Through Rows","text":"<pre><code>for index, row in df.iterrows():\n    print(row[\"Name\"], \"is\", row[\"Age\"], \"years old.\")\n</code></pre>"},{"location":"codex/#exercise_2","title":"Exercise:","text":"<ol> <li>Create a DataFrame with data about your favorite movies (columns: Title, Year, Genre).</li> <li>Add a new column for Rating.</li> <li>Filter the movies to show only those released after 2010.</li> </ol>"},{"location":"codex/#4-comparing-lists-dictionaries-and-dataframes","title":"4. Comparing Lists, Dictionaries, and DataFrames","text":"Feature List Dictionary DataFrame Data Organization Ordered, items by index Key-value pairs Rows and columns Access Method By index By key By row/column Ideal Use Case Simple collections Mapping relationships Tabular data"},{"location":"codex/#5-final-project-idea-student-report-system","title":"5. Final Project Idea: Student Report System","text":"<p>Build a system that: 1. Stores student data in a DataFrame. 2. Allows adding a new student (Name, Age, Grade). 3. Filters students by a minimum grade. 4. Prints all student data.</p>"},{"location":"codex/#example-code-for-the-system","title":"Example Code for the System:","text":"<pre><code>import pandas as pd\n\n# Initial data\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [16, 17, 16],\n    \"Grade\": [\"A\", \"B\", \"A\"]\n}\ndf = pd.DataFrame(data)\n\n# Add a new student\nnew_student = {\"Name\": \"Daisy\", \"Age\": 17, \"Grade\": \"A+\"}\ndf = df.append(new_student, ignore_index=True)\n\n# Filter by grade\nprint(\"Students with grade A or higher:\")\nprint(df[df[\"Grade\"] &gt;= \"A\"])\n</code></pre> <p>Let me know if you\u2019d like additional examples or explanations!</p>"},{"location":"codex/#file-io","title":"File IO","text":"<p>Here\u2019s a tutorial on writing, saving, and reading files in Python, along with template functions for working with plain text, CSV, and JSON files.</p>"},{"location":"codex/#1-plain-text-file","title":"1. Plain Text File","text":"<p>Plain text files are the simplest type of file. You can write strings to them or read their content as text.</p>"},{"location":"codex/#template-function-for-plain-text-files","title":"Template Function for Plain Text Files","text":""},{"location":"codex/#writing-to-a-plain-text-file","title":"Writing to a Plain Text File","text":"<pre><code>def write_to_text_file(file_path, text):\n    with open(file_path, 'w') as file:  # Open file in write mode\n        file.write(text)  # Write text to the file\n</code></pre>"},{"location":"codex/#reading-from-a-plain-text-file","title":"Reading from a Plain Text File","text":"<pre><code>def read_from_text_file(file_path):\n    with open(file_path, 'r') as file:  # Open file in read mode\n        return file.read()  # Return the content of the file\n</code></pre>"},{"location":"codex/#example-usage","title":"Example Usage","text":"<pre><code>write_to_text_file('example.txt', 'Hello, World!')\ncontent = read_from_text_file('example.txt')\nprint(content)\n</code></pre>"},{"location":"codex/#2-csv-file","title":"2. CSV File","text":"<p>CSV (Comma-Separated Values) files are used to store tabular data.</p>"},{"location":"codex/#template-function-for-csv-files","title":"Template Function for CSV Files","text":""},{"location":"codex/#writing-to-a-csv-file","title":"Writing to a CSV File","text":"<pre><code>import csv\n\ndef write_to_csv(file_path, data):\n    with open(file_path, 'w', newline='') as file:  # Open file in write mode\n        writer = csv.writer(file)\n        writer.writerows(data)  # Write rows of data\n</code></pre>"},{"location":"codex/#reading-from-a-csv-file","title":"Reading from a CSV File","text":"<pre><code>def read_from_csv(file_path):\n    with open(file_path, 'r') as file:  # Open file in read mode\n        reader = csv.reader(file)\n        return list(reader)  # Convert rows to a list\n</code></pre>"},{"location":"codex/#example-usage_1","title":"Example Usage","text":"<pre><code>data = [\n    ['Name', 'Age', 'Grade'],\n    ['Alice', 16, 'A'],\n    ['Bob', 17, 'B']\n]\nwrite_to_csv('students.csv', data)\n\ncontent = read_from_csv('students.csv')\nfor row in content:\n    print(row)\n</code></pre>"},{"location":"codex/#3-json-file","title":"3. JSON File","text":"<p>JSON (JavaScript Object Notation) is used to store structured data, such as dictionaries or lists.</p>"},{"location":"codex/#template-function-for-json-files","title":"Template Function for JSON Files","text":""},{"location":"codex/#writing-to-a-json-file","title":"Writing to a JSON File","text":"<pre><code>import json\n\ndef write_to_json(file_path, data):\n    with open(file_path, 'w') as file:  # Open file in write mode\n        json.dump(data, file, indent=4)  # Write data to the file in JSON format\n</code></pre>"},{"location":"codex/#reading-from-a-json-file","title":"Reading from a JSON File","text":"<pre><code>def read_from_json(file_path):\n    with open(file_path, 'r') as file:  # Open file in read mode\n        return json.load(file)  # Load data from JSON file\n</code></pre>"},{"location":"codex/#example-usage_2","title":"Example Usage","text":"<pre><code>data = {\n    'students': [\n        {'name': 'Alice', 'age': 16, 'grade': 'A'},\n        {'name': 'Bob', 'age': 17, 'grade': 'B'}\n    ]\n}\nwrite_to_json('students.json', data)\n\ncontent = read_from_json('students.json')\nprint(content)\n</code></pre>"},{"location":"codex/#summary-of-file-types","title":"Summary of File Types","text":"File Type Python Module Best for Plain Text <code>open()</code> Storing simple text or logs CSV <code>csv</code> Tabular data JSON <code>json</code> Structured data (hierarchical) <p>Each of these functions can be adapted based on specific requirements. Let me know if you'd like further customizations or examples!</p>"},{"location":"medium/","title":"Medium Articles","text":""},{"location":"mkdocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/#deploy-to-github","title":"Deploy to Github","text":"<pre><code>#!/bin/bash\n\n# Check if a site name is provided\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;site_name&gt;\"\n  exit 1\nfi\n\nSITE_NAME=$1\nPROJECT_DIR=\"/home/larry/mk/$SITE_NAME\"\n\n# Step 1: Navigate to project directory\ncd \"$PROJECT_DIR\" || { echo \"\u274c Directory not found!\"; exit 1; }\n\n# Step 2: Activate virtual environment\nsource venv/bin/activate\n\n# Step 3: Deploy MkDocs site\nmkdocs gh-deploy --force\n\necho \"\u2705 MkDocs site deployed for $SITE_NAME! Live at: https://blutterfly.github.io/$SITE_NAME/\"\n</code></pre>"},{"location":"pandas/","title":"Pandas","text":""},{"location":"pandas/#stock-data","title":"Stock Data","text":"<p>Here\u2019s a step-by-step guide with Python code to scrape the S&amp;P 500 stocks from Wikipedia and use the <code>yfinance</code> library to retrieve stock information, historical data, financial statements, holders, and dividend activity.</p>"},{"location":"pandas/#1-get-sp-500-stocks-from-wikipedia","title":"1. Get S&amp;P 500 Stocks from Wikipedia","text":"<p>Library: Use <code>pandas</code> for scraping the table.</p> <pre><code>import pandas as pd\n\ndef get_sp500_stocks():\n    url = \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n    tables = pd.read_html(url)\n    sp500_table = tables[0]  # First table contains the S&amp;P 500 data\n    return sp500_table[['Symbol', 'Security']]  # Return only ticker and company name\n\n# Example Usage\nsp500_stocks = get_sp500_stocks()\nprint(sp500_stocks.head())\n</code></pre>"},{"location":"pandas/#2-get-historical-data-using-yfinance","title":"2. Get Historical Data Using <code>yfinance</code>","text":"<p>Library: Use <code>yfinance</code> to fetch historical data.</p> <pre><code>import yfinance as yf\n\ndef get_historical_data(tickers, start_date='2020-01-01', end_date='2024-01-01'):\n    historical_data = {}\n    for ticker in tickers:\n        stock = yf.Ticker(ticker)\n        data = stock.history(start=start_date, end=end_date)\n        historical_data[ticker] = data\n    return historical_data\n\n# Example Usage: Get historical data for the top 5 stocks by market cap\ntop_tickers = sp500_stocks['Symbol'].head(5).tolist()\nhistorical_data = get_historical_data(top_tickers)\nfor ticker, data in historical_data.items():\n    print(f\"Historical data for {ticker}:\")\n    print(data.head())\n</code></pre>"},{"location":"pandas/#3-get-stock-info","title":"3. Get Stock Info","text":"<p>Use <code>info</code> from <code>yfinance</code>.</p> <pre><code>def get_stock_info(ticker):\n    stock = yf.Ticker(ticker)\n    return stock.info  # Returns a dictionary with stock information\n\n# Example Usage\nticker = 'AAPL'  # Replace with any ticker\ninfo = get_stock_info(ticker)\nprint(f\"Stock Info for {ticker}:\")\nprint(info)\n</code></pre>"},{"location":"pandas/#4-get-financial-statements","title":"4. Get Financial Statements","text":"<p>Fetch annual and quarterly financials like income statements, cash flow, and balance sheets.</p> <pre><code>def get_financial_statements(ticker):\n    stock = yf.Ticker(ticker)\n    return {\n        'annual_income_statement': stock.financials,\n        'quarterly_income_statement': stock.quarterly_financials,\n        'annual_balance_sheet': stock.balance_sheet,\n        'quarterly_balance_sheet': stock.quarterly_balance_sheet,\n        'annual_cash_flow': stock.cashflow,\n        'quarterly_cash_flow': stock.quarterly_cashflow,\n    }\n\n# Example Usage\nticker = 'AAPL'\nfinancials = get_financial_statements(ticker)\nprint(f\"Annual Income Statement for {ticker}:\")\nprint(financials['annual_income_statement'])\n</code></pre>"},{"location":"pandas/#5-get-holders-institutional-and-insider","title":"5. Get Holders (Institutional and Insider)","text":"<p>Retrieve holder information.</p> <pre><code>def get_holders(ticker):\n    stock = yf.Ticker(ticker)\n    return {\n        'institutional_holders': stock.institutional_holders,\n        'major_holders': stock.major_holders,\n        'insider_holders': stock.insider_holders\n    }\n\n# Example Usage\nticker = 'AAPL'\nholders = get_holders(ticker)\nprint(f\"Institutional Holders for {ticker}:\")\nprint(holders['institutional_holders'])\n</code></pre>"},{"location":"pandas/#6-get-dividend-activity","title":"6. Get Dividend Activity","text":"<p>Extract dividend data.</p> <pre><code>def get_dividend_activity(ticker):\n    stock = yf.Ticker(ticker)\n    dividends = stock.dividends\n    if dividends.empty:\n        return f\"No dividend data for {ticker}.\"\n    return dividends\n\n# Example Usage\nticker = 'AAPL'\ndividends = get_dividend_activity(ticker)\nprint(f\"Dividend Activity for {ticker}:\")\nprint(dividends)\n</code></pre>"},{"location":"pandas/#7-summary-script-to-combine-all-functions","title":"7. Summary Script to Combine All Functions","text":"<p>Here\u2019s how to tie everything together:</p> <pre><code>def get_stock_data(ticker):\n    return {\n        'info': get_stock_info(ticker),\n        'historical_data': get_historical_data([ticker]),\n        'financial_statements': get_financial_statements(ticker),\n        'holders': get_holders(ticker),\n        'dividends': get_dividend_activity(ticker),\n    }\n\n# Example Usage\nticker = 'AAPL'\nstock_data = get_stock_data(ticker)\nprint(f\"Full data for {ticker}:\")\nprint(stock_data)\n</code></pre>"},{"location":"pandas/#required-libraries","title":"Required Libraries","text":"<p>Install the necessary libraries:</p> <pre><code>pip install pandas yfinance lxml\n</code></pre> <p>This script covers fetching: 1. S&amp;P 500 tickers from Wikipedia. 2. Historical data for selected stocks. 3. Info, financials, holders, and dividends for a single ticker or a batch of tickers.</p> <p>Let me know if you\u2019d like enhancements or detailed handling for any specific section!</p>"}]}